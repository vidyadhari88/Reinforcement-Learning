{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: gym in /anaconda3/lib/python3.6/site-packages (0.10.9)\n",
      "Requirement already satisfied: requests>=2.0 in /anaconda3/lib/python3.6/site-packages (from gym) (2.18.4)\n",
      "Requirement already satisfied: scipy in /anaconda3/lib/python3.6/site-packages (from gym) (1.1.0)\n",
      "Requirement already satisfied: six in /anaconda3/lib/python3.6/site-packages (from gym) (1.11.0)\n",
      "Requirement already satisfied: pyglet>=1.2.0 in /anaconda3/lib/python3.6/site-packages (from gym) (1.3.2)\n",
      "Requirement already satisfied: numpy>=1.10.4 in /anaconda3/lib/python3.6/site-packages (from gym) (1.14.3)\n",
      "Requirement already satisfied: chardet<3.1.0,>=3.0.2 in /anaconda3/lib/python3.6/site-packages (from requests>=2.0->gym) (3.0.4)\n",
      "Requirement already satisfied: idna<2.7,>=2.5 in /anaconda3/lib/python3.6/site-packages (from requests>=2.0->gym) (2.6)\n",
      "Requirement already satisfied: urllib3<1.23,>=1.21.1 in /anaconda3/lib/python3.6/site-packages (from requests>=2.0->gym) (1.22)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /anaconda3/lib/python3.6/site-packages (from requests>=2.0->gym) (2018.4.16)\n",
      "Requirement already satisfied: future in /anaconda3/lib/python3.6/site-packages (from pyglet>=1.2.0->gym) (0.17.1)\n",
      "Requirement already satisfied: gym[atari] in /anaconda3/lib/python3.6/site-packages (0.10.9)\n",
      "Requirement already satisfied: scipy in /anaconda3/lib/python3.6/site-packages (from gym[atari]) (1.1.0)\n",
      "Requirement already satisfied: requests>=2.0 in /anaconda3/lib/python3.6/site-packages (from gym[atari]) (2.18.4)\n",
      "Requirement already satisfied: numpy>=1.10.4 in /anaconda3/lib/python3.6/site-packages (from gym[atari]) (1.14.3)\n",
      "Requirement already satisfied: pyglet>=1.2.0 in /anaconda3/lib/python3.6/site-packages (from gym[atari]) (1.3.2)\n",
      "Requirement already satisfied: six in /anaconda3/lib/python3.6/site-packages (from gym[atari]) (1.11.0)\n",
      "Requirement already satisfied: Pillow; extra == \"atari\" in /anaconda3/lib/python3.6/site-packages (from gym[atari]) (5.1.0)\n",
      "Collecting atari-py>=0.1.4; extra == \"atari\" (from gym[atari])\n",
      "  Using cached https://files.pythonhosted.org/packages/ec/da/bac20e6b5e0e5cc0e27bc519cdb7329102df2229dfd8b11ec9d053480d87/atari_py-0.1.7-cp36-cp36m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n",
      "Collecting PyOpenGL; extra == \"atari\" (from gym[atari])\n",
      "Requirement already satisfied: chardet<3.1.0,>=3.0.2 in /anaconda3/lib/python3.6/site-packages (from requests>=2.0->gym[atari]) (3.0.4)\n",
      "Requirement already satisfied: idna<2.7,>=2.5 in /anaconda3/lib/python3.6/site-packages (from requests>=2.0->gym[atari]) (2.6)\n",
      "Requirement already satisfied: urllib3<1.23,>=1.21.1 in /anaconda3/lib/python3.6/site-packages (from requests>=2.0->gym[atari]) (1.22)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /anaconda3/lib/python3.6/site-packages (from requests>=2.0->gym[atari]) (2018.4.16)\n",
      "Requirement already satisfied: future in /anaconda3/lib/python3.6/site-packages (from pyglet>=1.2.0->gym[atari]) (0.17.1)\n",
      "Installing collected packages: atari-py, PyOpenGL\n",
      "Successfully installed PyOpenGL-3.1.0 atari-py-0.1.7\n"
     ]
    }
   ],
   "source": [
    "#ubit name: vc34\n",
    "#ubi number: 50290085\n",
    "\n",
    "!pip install gym\n",
    "!pip install gym[atari]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/h5py/__init__.py:36: FutureWarning: Conversion of the second argument of issubdtype from `float` to `np.floating` is deprecated. In future, it will be treated as `np.float64 == np.dtype(float).type`.\n",
      "  from ._conv import register_converters as _register_converters\n",
      "Using TensorFlow backend.\n",
      "/anaconda3/lib/python3.6/importlib/_bootstrap.py:219: RuntimeWarning: compiletime version 3.5 of module 'tensorflow.python.framework.fast_tensor_util' does not match runtime version 3.6\n",
      "  return f(*args, **kwds)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Could not import Google Colab.\n"
     ]
    }
   ],
   "source": [
    "import random, math, time\n",
    "import numpy as np\n",
    "from keras.models import Sequential\n",
    "from keras.layers import *\n",
    "from keras.optimizers import *\n",
    "from collections import deque\n",
    "import gym\n",
    "\n",
    "import matplotlib\n",
    "#matplotlib.use(\"Agg\")\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.image import imread\n",
    "from matplotlib import rc, animation\n",
    "from IPython import display\n",
    "from IPython.display import HTML\n",
    "%matplotlib inline\n",
    "\n",
    "try:\n",
    "  from google.colab import files\n",
    "except:\n",
    "  print(\"Could not import Google Colab.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# cartpole"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "ENV_NAME = \"CartPole-v1\"\n",
    "\n",
    "GAMMA = 0.99\n",
    "LEARNING_RATE = 0.001\n",
    "\n",
    "MEMORY_SIZE = 10000\n",
    "BATCH_SIZE = 20\n",
    "\n",
    "max_epsilon = 1.0\n",
    "min_epsilon = 0.01\n",
    "lamb = 0.0001\n",
    "EXPLORATION_DECAY = 0.995\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "class DQNNetwork:\n",
    "     # DQN network\n",
    "    def __init__(self, observation_space, action_space,weights=None):\n",
    "        self.epsilon = max_epsilon\n",
    "        self.observation_space = observation_space\n",
    "        self.action_space = action_space\n",
    "        self.memory = deque(maxlen=MEMORY_SIZE)\n",
    "        self.steps = 0\n",
    "\n",
    "        self.model = Sequential()\n",
    "        self.model.add(Dense(24, input_shape=(observation_space,), activation=\"relu\"))\n",
    "        self.model.add(Dense(24, activation=\"relu\"))\n",
    "        self.model.add(Dense(self.action_space, activation=\"linear\"))\n",
    "        self.model.compile(loss=\"mse\", optimizer=Adam(lr=LEARNING_RATE))\n",
    "\n",
    "       \n",
    "    # used to store the previous experiences \n",
    "    def remember(self, state, action, reward, next_state, done):\n",
    "        self.memory.append((state, action, reward, next_state, done))\n",
    "\n",
    "    # defines the poliy on how the agent needs to act/take further steps\n",
    "    def act(self, state):\n",
    "        if np.random.rand() < self.epsilon:\n",
    "           # return random.randrange(self.action_space)\n",
    "            return random.randrange(self.action_space)\n",
    "        q_values = self.model.predict(state)\n",
    "        return np.argmax(q_values[0])\n",
    "\n",
    "    # the agaent learns on the previous experinces and thereby updates the Q table whihc defines the optimal solution\n",
    "    def replay(self):\n",
    "        if len(self.memory) < BATCH_SIZE:\n",
    "            return\n",
    "        batch = random.sample(self.memory, BATCH_SIZE)\n",
    "        for state, action, reward, state_next, terminal in batch:\n",
    "            q_update = reward\n",
    "            if not terminal:\n",
    "                q_update = (reward + GAMMA * np.amax(self.model.predict(state_next)[0]))\n",
    "            q_values = self.model.predict(state)\n",
    "            q_values[0][action] = q_update\n",
    "            self.model.fit(state, q_values, verbose=0)\n",
    "           \n",
    "        self.steps += 1\n",
    "        self.epsilon = min_epsilon + ((max_epsilon - min_epsilon) * np.exp(-(lamb*self.steps)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "Episode 0\n",
      "Epsilon 1.0\n",
      "Last Episode Reward: 15.0\n",
      "Episode Reward Rolling Mean: nan\n",
      "----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/numpy/core/fromnumeric.py:2957: RuntimeWarning: Mean of empty slice.\n",
      "  out=out, **kwargs)\n",
      "/anaconda3/lib/python3.6/site-packages/numpy/core/_methods.py:80: RuntimeWarning: invalid value encountered in double_scalars\n",
      "  ret = ret.dtype.type(ret / rcount)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n",
      "7\n",
      "8\n",
      "9\n",
      "10\n",
      "Episode 10\n",
      "Epsilon 0.9804937310944902\n",
      "Last Episode Reward: 33.0\n",
      "Episode Reward Rolling Mean: 15.0\n",
      "----------\n",
      "11\n",
      "12\n",
      "13\n",
      "14\n",
      "15\n",
      "16\n",
      "17\n",
      "18\n",
      "19\n",
      "20\n",
      "Episode 20\n",
      "Epsilon 0.9595659098135105\n",
      "Last Episode Reward: 46.0\n",
      "Episode Reward Rolling Mean: 20.727272727272727\n",
      "----------\n",
      "21\n",
      "22\n",
      "23\n",
      "24\n",
      "25\n",
      "26\n",
      "27\n",
      "28\n",
      "29\n",
      "30\n",
      "Episode 30\n",
      "Epsilon 0.9351028709148004\n",
      "Last Episode Reward: 31.0\n",
      "Episode Reward Rolling Mean: 21.714285714285715\n",
      "----------\n",
      "31\n",
      "32\n",
      "33\n",
      "34\n",
      "35\n",
      "36\n",
      "37\n",
      "38\n",
      "39\n",
      "40\n",
      "Episode 40\n",
      "Epsilon 0.911901167020549\n",
      "Last Episode Reward: 14.0\n",
      "Episode Reward Rolling Mean: 23.451612903225808\n",
      "----------\n",
      "41\n",
      "42\n",
      "43\n",
      "44\n",
      "45\n",
      "46\n",
      "47\n",
      "48\n",
      "49\n",
      "50\n",
      "Episode 50\n",
      "Epsilon 0.8876123164719245\n",
      "Last Episode Reward: 29.0\n",
      "Episode Reward Rolling Mean: 24.170731707317074\n",
      "----------\n",
      "51\n",
      "52\n",
      "53\n",
      "54\n",
      "55\n",
      "56\n",
      "57\n",
      "58\n",
      "59\n",
      "60\n",
      "Episode 60\n",
      "Epsilon 0.8683439927827515\n",
      "Last Episode Reward: 19.0\n",
      "Episode Reward Rolling Mean: 24.980392156862745\n",
      "----------\n",
      "61\n",
      "62\n",
      "63\n",
      "64\n",
      "65\n",
      "66\n",
      "67\n",
      "68\n",
      "69\n",
      "70\n",
      "Episode 70\n",
      "Epsilon 0.8419771222343236\n",
      "Last Episode Reward: 59.0\n",
      "Episode Reward Rolling Mean: 24.688524590163933\n",
      "----------\n",
      "71\n",
      "72\n",
      "73\n",
      "74\n",
      "75\n",
      "76\n",
      "77\n",
      "78\n",
      "79\n",
      "80\n",
      "Episode 80\n",
      "Epsilon 0.8217601730330008\n",
      "Last Episode Reward: 31.0\n",
      "Episode Reward Rolling Mean: 25.746478873239436\n",
      "----------\n",
      "81\n",
      "82\n",
      "83\n",
      "84\n",
      "85\n",
      "86\n",
      "87\n",
      "88\n",
      "89\n",
      "90\n",
      "Episode 90\n",
      "Epsilon 0.7896186915201495\n",
      "Last Episode Reward: 12.0\n",
      "Episode Reward Rolling Mean: 25.728395061728396\n",
      "----------\n",
      "91\n",
      "92\n",
      "93\n",
      "94\n",
      "95\n",
      "96\n",
      "97\n",
      "98\n",
      "99\n",
      "100\n",
      "Episode 100\n",
      "Epsilon 0.7523382064257261\n",
      "Last Episode Reward: 73.0\n",
      "Episode Reward Rolling Mean: 27.45054945054945\n",
      "----------\n",
      "101\n",
      "102\n",
      "103\n",
      "104\n",
      "105\n",
      "106\n",
      "107\n",
      "108\n",
      "109\n",
      "110\n",
      "Episode 110\n",
      "Epsilon 0.7106475249669407\n",
      "Last Episode Reward: 67.0\n",
      "Episode Reward Rolling Mean: 29.683168316831683\n",
      "----------\n",
      "111\n",
      "112\n",
      "113\n",
      "114\n",
      "115\n",
      "116\n",
      "117\n",
      "118\n",
      "119\n",
      "120\n",
      "Episode 120\n",
      "Epsilon 0.6700429727503104\n",
      "Last Episode Reward: 36.0\n",
      "Episode Reward Rolling Mean: 32.306306306306304\n",
      "----------\n",
      "121\n",
      "122\n",
      "123\n",
      "124\n",
      "125\n",
      "126\n",
      "127\n",
      "128\n",
      "129\n",
      "130\n",
      "Episode 130\n",
      "Epsilon 0.6188700991860228\n",
      "Last Episode Reward: 95.0\n",
      "Episode Reward Rolling Mean: 34.65289256198347\n",
      "----------\n",
      "131\n",
      "132\n",
      "133\n",
      "134\n",
      "135\n",
      "136\n",
      "137\n",
      "138\n",
      "139\n",
      "140\n",
      "Episode 140\n",
      "Epsilon 0.557687540700065\n",
      "Last Episode Reward: 137.0\n",
      "Episode Reward Rolling Mean: 38.2442748091603\n",
      "----------\n",
      "141\n",
      "142\n",
      "143\n",
      "144\n",
      "145\n",
      "146\n",
      "147\n",
      "148\n",
      "149\n",
      "150\n",
      "Episode 150\n",
      "Epsilon 0.5117013102607104\n",
      "Last Episode Reward: 212.0\n",
      "Episode Reward Rolling Mean: 43.11347517730496\n",
      "----------\n",
      "151\n",
      "152\n",
      "153\n",
      "154\n",
      "155\n",
      "156\n",
      "157\n",
      "158\n",
      "159\n",
      "160\n",
      "Episode 160\n",
      "Epsilon 0.43195764560269745\n",
      "Last Episode Reward: 161.0\n",
      "Episode Reward Rolling Mean: 46.13245033112583\n",
      "----------\n",
      "161\n",
      "162\n",
      "163\n",
      "164\n",
      "165\n",
      "166\n",
      "167\n",
      "168\n",
      "169\n",
      "170\n",
      "Episode 170\n",
      "Epsilon 0.3741278139139033\n",
      "Last Episode Reward: 130.0\n",
      "Episode Reward Rolling Mean: 54.08074534161491\n",
      "----------\n",
      "171\n",
      "172\n",
      "173\n",
      "174\n",
      "175\n",
      "176\n",
      "177\n",
      "178\n",
      "179\n",
      "180\n",
      "Episode 180\n",
      "Epsilon 0.3003842201444307\n",
      "Last Episode Reward: 232.0\n",
      "Episode Reward Rolling Mean: 59.59649122807018\n",
      "----------\n",
      "181\n",
      "182\n",
      "183\n",
      "184\n",
      "185\n",
      "186\n",
      "187\n",
      "188\n",
      "189\n",
      "190\n",
      "Episode 190\n",
      "Epsilon 0.2459228731979071\n",
      "Last Episode Reward: 25.0\n",
      "Episode Reward Rolling Mean: 68.86187845303867\n",
      "----------\n",
      "191\n",
      "192\n",
      "193\n",
      "194\n",
      "195\n",
      "196\n",
      "197\n",
      "198\n",
      "199\n"
     ]
    }
   ],
   "source": [
    "# main function\n",
    "env = gym.make(ENV_NAME)\n",
    "\n",
    "observation_space = env.observation_space.shape[0]\n",
    "action_space = env.action_space.n\n",
    "dqn_solver = DQNNetwork(observation_space, action_space)\n",
    "num_episodes = 200\n",
    "timeSteps = 20000\n",
    "rewardsList = []\n",
    "episilonList = []\n",
    "\n",
    "for episode in range(0,num_episodes):\n",
    "    state = env.reset() #intial state\n",
    "    state = np.reshape(state, [1, observation_space])\n",
    "    R = 0\n",
    "    while True:\n",
    "        action = dqn_solver.act(state)\n",
    "        state_next, reward, done, info = env.step(action)\n",
    "        R += reward\n",
    "        reward = reward if not done else -reward\n",
    "        state_next = np.reshape(state_next, [1, observation_space])\n",
    "        dqn_solver.remember(state, action, reward, state_next, done)\n",
    "        state = state_next\n",
    "        if done:\n",
    "            break\n",
    "        dqn_solver.replay()\n",
    "    rewardsList.append(R)\n",
    "    episilonList.append(dqn_solver.epsilon)\n",
    "    print(episode)\n",
    "    if episode % 10 == 0:\n",
    "      print('Episode {}'.format(episode))\n",
    "#       print('Time Elapsed: {0:.2f}s'.format(time.time() - t0))\n",
    "      print('Epsilon {}'.format(episilonList[-1]))\n",
    "      print('Last Episode Reward: {}'.format(R))\n",
    "      print('Episode Reward Rolling Mean: {}'.format(np.mean(rewardsList[:-10])))\n",
    "      print('-'*10)\n",
    "    #print(np.around(dqn_solver.epsilon,3))\n",
    "    if np.around(dqn_solver.epsilon,2) == 0.09 :\n",
    "      print(\"true\")\n",
    "      break\n",
    "del dqn_solver.memory"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0xb27664e10>]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8, 6), dpi=80)\n",
    "plt.title(\"Epsilon\")\n",
    "plt.xlabel(\"Episode\")\n",
    "plt.ylabel(\"Epsilon value\")\n",
    "plt.plot(episilonList)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0xb276473c8>]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "smoothing = 50\n",
    "plt.figure(figsize=(8, 6), dpi=80)\n",
    "plt.title(\"Episode Reward\")\n",
    "plt.xlabel(\"Episode\")\n",
    "plt.ylabel(\"{} MA Reward\".format(smoothing))\n",
    "episode_ma = np.convolve(rewardsList, \n",
    "                         np.ones((smoothing,))/smoothing, mode='valid')\n",
    "plt.plot(episode_ma)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
